"""The root of all queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  version: String
  me: User
  users(after: String, first: Int, before: String, last: Int): UserConnection!
  stores(after: String, first: Int, before: String, last: Int): StoreConnection!
  storeByStoreId(id: ID!): Store
  productsByStoreId(storeId: ID!): ProductConnection!
  userPoints(after: String, first: Int, before: String, last: Int): UserPointsConnection!
  userPointsByStoreIdAndUserId(storeId: ID!, userId: ID): UserPointsConnection!
  userStore(after: String, first: Int, before: String, last: Int): UserStoreConnection!
  userStoreByUserId(userId: ID): UserStoreConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  name: String
  username: String
  email: String
  type: String
}

"""A connection to a list of items."""
type UserConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [UserEdge]!
}

"""Information about pagination in a connection."""
type PageInfoExtended {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type StoreConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [StoreEdge]!
}

"""An edge in a connection."""
type StoreEdge {
  """The item at the end of the edge"""
  node: Store

  """A cursor for use in pagination"""
  cursor: String!
}

"""Store data"""
type Store implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  name: String
  description: String
  pictureUrl: String
  products: ProductConnection!
}

"""A connection to a list of items."""
type ProductConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [ProductEdge]!
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge"""
  node: Product

  """A cursor for use in pagination"""
  cursor: String!
}

"""Product data"""
type Product implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  name: String
  description: String
  pictureUrl: String
  points: Int
  storeId: ID
}

"""A connection to a list of items."""
type UserPointsConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [UserPointsEdge]!
}

"""An edge in a connection."""
type UserPointsEdge {
  """The item at the end of the edge"""
  node: UserPoints

  """A cursor for use in pagination"""
  cursor: String!
}

"""UserPoints data"""
type UserPoints implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  points: Int
  storeId: ID
  userId: ID
}

"""A connection to a list of items."""
type UserStoreConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [UserStoreEdge]!
}

"""An edge in a connection."""
type UserStoreEdge {
  """The item at the end of the edge"""
  node: UserStore

  """A cursor for use in pagination"""
  cursor: String!
}

"""UserStore data"""
type UserStore implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  storeId: ID
  userId: ID
  store: Store
}

"""Root of ... mutations"""
type Mutation {
  UserLoginWithEmail(input: UserLoginWithEmailInput!): UserLoginWithEmailPayload
  UserRegisterWithEmail(input: UserRegisterWithEmailInput!): UserRegisterWithEmailPayload
  StoreCreate(input: StoreCreateInput!): StoreCreatePayload
  ProductCreate(input: ProductCreateInput!): ProductCreatePayload
  UserPointsCreateOrUpdate(input: UserPointsCreateOrUpdateInput!): UserPointsCreateOrUpdatePayload
  UserStoreCreate(input: UserStoreCreateInput!): UserStoreCreatePayload
}

type UserLoginWithEmailPayload {
  token: String
  me: User
  error: String
  success: String
  clientMutationId: String
}

input UserLoginWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserRegisterWithEmailPayload {
  token: String
  me: User
  error: String
  success: String
  clientMutationId: String
}

input UserRegisterWithEmailInput {
  name: String!
  email: String!
  password: String!
  type: String!
  clientMutationId: String
}

type StoreCreatePayload {
  store: Store
  error: String
  success: String
  clientMutationId: String
}

input StoreCreateInput {
  name: String!
  description: String!
  pictureUrl: String!
  clientMutationId: String
}

type ProductCreatePayload {
  product: Product
  error: String
  success: String
  clientMutationId: String
}

input ProductCreateInput {
  name: String!
  description: String!
  pictureUrl: String!
  points: Int!
  storeId: ID!
  clientMutationId: String
}

type UserPointsCreateOrUpdatePayload {
  userPoints: UserPoints
  error: String
  success: String
  clientMutationId: String
}

input UserPointsCreateOrUpdateInput {
  points: Int!
  storeId: ID!
  userId: ID!
  clientMutationId: String
}

type UserStoreCreatePayload {
  userStore: UserStore
  error: String
  success: String
  clientMutationId: String
}

input UserStoreCreateInput {
  storeId: ID!
  userId: ID!
  clientMutationId: String
}
